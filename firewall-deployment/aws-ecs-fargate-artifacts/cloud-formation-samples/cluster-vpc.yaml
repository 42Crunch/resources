AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys a Fargate cluster that is in a VPC with both
  public and private subnets. Containers can be deployed into either
  the public subnets or the private subnets, and there are two load
  balancers. One is inside the public subnet, which can be used to
  send traffic to the containers in the private subnet, and one in
  the private subnet, which can be used for private internal traffic
  between internal services.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public:
      CIDR: "10.0.0.0/24"
    Private:
      CIDR: "10.0.1.0/24"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "Public", "CIDR"]
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "Private", "CIDR"]

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Three rules, allowing network traffic from a public facing load
  # balancer, a private internal load balancer, and from other members
  # of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref "VPC"
  EcsSecurityGroupIngressFromPublicLB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public LB
      GroupId: !Ref "FargateContainerSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
  EcsSecurityGroupIngressFromPublicLBTLS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public LB
      GroupId: !Ref "FargateContainerSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
  EcsSecurityGroupHealthCheck:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HealthCheck Port
      GroupId: !Ref "FargateContainerSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8880
      ToPort: 8880    
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref "FargateContainerSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "FargateContainerSecurityGroup"

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnet

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ClusterName"]]
  ExternalHostname:
    Description: The DNS name the external load balancer
    Value: !GetAtt "PublicLoadBalancer.DNSName"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ExternalHostname"]]
  PublicLoadBalancer:
    Description: The ARN of the public load balancer
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicLoadBalancer"]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "VPCId"]]
  PublicSubnet:
    Description: Public subnet
    Value: !Ref "PublicSubnet"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicSubnet"]]
  PrivateSubnet:
    Description: Private subnet
    Value: !Ref "PrivateSubnet"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnet"]]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref "FargateContainerSecurityGroup"
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "FargateContainerSecurityGroup"]]
